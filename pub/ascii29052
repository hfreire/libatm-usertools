/*****************************************************************************
 *                                                                           *
 *                      10101000100010001010101100101010101                  *
 *                      0101010101               0101010100                  *
 *                      0101010101               0101010100                  *
 *                      1010101010        10101  0101110101                  *
 *                      1010101010       01  10  0101011101                  *
 *                      1010111010       01      0101010101                  *
 *                       010101010  01  010 0101 010101010                   *
 *                       010101010  01  010  01  010101011                   *
 *                        01010101  01  010  01  01010101                    *
 *                        11010101  01  010  01  01010110                    *
 *                         1010101  01  010  01  0101000                     *
 *                         1110101  01  010  01  0101001                     *
 *                          110101      010      010001                      *
 *                           10101     001       01011                       *
 *                            1101  10101        0101                        *
 *                             110               011                         *
 *                              10               01                          *
 *                               01             10                           *
 *                                 00         10                             *
 *                                  01       01                              *
 *                                    01   01                                *
 *                                      010                                  *
 *                                       1                                   *
 *                                                                           *
 *                         Universidade Técnica de Lisboa                    *
 *                                                                           *
 *                           Instituto Superior Técnico                      *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                      RIC - Redes Integradas de Comunicações               *
 *                                 ATM Application                           *
 *                                                                           *
 *                         Professor Paulo Rogério Pereira                   *
 *                                                                           *
 *                                                                           *
 *****************************************************************************
 * @filename: strs.c                                                         *
 * @description:                                                             *
 * @language: C                                                              *
 * @compiled on: cc/gcc                                                      *
 * @last_update_at: 2007-10-12                                               *
 *****************************************************************************
 * @students_that_colaborated_on_this_file:                                  *
 *  57442 - Daniel Silvestre - daniel.silvestre@tagus.ist.utl.pt             *
 *  57476 - Hugo Miguel Pinho Freire - hugo.freire@tagus.ist.utl.pt          *
 *****************************************************************************
 * @changelog for this file:                                                 *
 *	No changelog was kept for this file.                  									 *
 *****************************************************************************
 * @comments for this file:                                                  *
 *****************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <atm.h>
#include <signal.h>
#include <sys/wait.h>
#include "../include/str.h"
#include "../include/sdu.h"

/*****************************************************************************
 * @name						usage
 * @description  		prints to stderr the correct syntax usage
 * @param						name
 */
static void usage(const char *name)
{
    fprintf(stderr,"usage: %s [itf.]vpi.vci\n",name);
    exit(1);
}

/*****************************************************************************
 * @name						die_with_error
 * @description      
 * @param           message
 */
void die_with_error(const char *message)
{
    perror(message);
    exit(1);
}

/*****************************************************************************
 * @name						file_size
 * @description     gets the file size
 * @param           filename
 * @return          on success, returns the file size, otherwise returns -1
 */
long int file_size(const char *filename) {

	int i;
	struct stat buf;
  
	if((i=lstat(filename, &buf)) < 0) return i;
  
	return buf.st_size;

}

/*****************************************************************************
 * @name						send_file
 * @description     
 * @param           
 * @return          
 */
void send_file(int sd, FILE *fd, long int size, int sdu_size){
	
	int i,n;	
	char *buf;
  sdu_t *sdu;
	
	sdu = sdu_init(sdu_size);
	buf = (char *) malloc(sdu_size);
	
  for(i=0,n=sdu_size;i<size;i+=sdu_size){
  	if(i+sdu_size>size) n=i+sdu_size-size;
		memset(buf,'\0',strlen(buf)); 		
 		fread(buf,n,1,fd);
 		sdu_data(sdu,buf);
 		sdu_write(sd,sdu,sdu_size);
	}
	
	sdu_delete(sdu);
	free(buf);
	
}
	
/*****************************************************************************
 * @name						main
 * @description  		
 * @param						argc, argv
 * @return					returns 0 on a successful exit
 */
int main(int argc,char **argv)
{
    struct sockaddr_atmpvc addr;
    struct atm_qos qos;
    int sd, s;
    long int i;
		sdu_t *sdu;
		FILE *fd;
		char *buf, *cwd;
    fd_set allset, rset;
		arg_t marg, carg;       
      
    /* verify the correct number of arguments given */    
    if (argc != 2) usage(argv[0]);
    	
		memcpy(marg.name,argv[0],strlen(argv[0]));    	

    /* create a socket for atm pvc use */	    	
    if ((sd=socket(PF_ATMPVC,SOCK_DGRAM,0)) < 0){
			die_with_error("socket() failed");
    }
    
    memset(&addr,0,sizeof(addr));

    /* convert textual representation of atm address to binary */    
    if (text2atm(argv[1],(struct sockaddr *) &addr,sizeof(addr),
      T2A_PVC | T2A_UNSPEC | T2A_WILDCARD) < 0) usage(marg.name);
      
    memset(&qos,0,sizeof(qos));

	  /* fill in the desired qos params */    
		qos.aal = ATM_AAL5;
    qos.rxtp.traffic_class = ATM_UBR;
    qos.rxtp.max_sdu = DEFAULT_SDU_SIZE;
    qos.txtp.traffic_class = ATM_UBR;
    qos.txtp.max_sdu = DEFAULT_SDU_SIZE;
    
    /* set options on sockets */    
    if (setsockopt(sd,SOL_ATM,SO_ATMQOS,&qos,sizeof(qos)) < 0){
			die_with_error("setsockopt() failed");
    }
    
    /* do a bind */
    if (bind(sd,(struct sockaddr *) &addr,sizeof(addr)) < 0){
			die_with_error("bind() failed");
    }
   
		/* clear all bits in allset */
    FD_ZERO(&allset);
    
    /* turn on the bit for sd in allset */ 
    FD_SET(sd,&allset); 
   
    /* change to directory containg files */ 
    cwd = getcwd(NULL,0);
    buf = (char *) malloc(strlen(cwd)+strlen(DEFAULT_FILE_DIR));
    sprintf(buf,"%s%s",cwd,DEFAULT_FILE_DIR);
    chdir(buf);
    free(cwd);
    free(buf);
    
    /* main cycle for read and write sdu's to the client */
    while (1) {

			memcpy(&rset,&allset,sizeof(fd_set));

			if((s = select(sd+1,&rset,NULL,NULL,NULL)) > 0 ){

				if(FD_ISSET(sd,&rset)){
	        
	        /* prepare a sdu */    	            
					sdu = sdu_init(DEFAULT_SDU_SIZE);
          
          /* receive filename being requested */
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);
					memcpy(carg.filename,sdu->data,strlen(sdu->data)+1);

					/* receive the desired bitrate */
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);
					carg.bitrate = atoi(sdu->data);

					/* receive the desired sdu size */					
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);										
					carg.sdu_size = atoi(sdu->data);
									
					printf("File %s was requested with a bitrate of %i and SDU size of %i bytes\n",carg.filename,carg.bitrate,carg.sdu_size);
			    
			    /* verify if filename exists, if not warn the client */ 
    			if((i = file_size(carg.filename)) < 0){
    				sdu_data(sdu,FILE_NOT_FOUND);
    				sdu_write(sd,sdu,DEFAULT_SDU_SIZE);    				
    			} 
    			else{
    				
    				/* if file exists, send the file size */
    				buf = (char *) malloc(DEFAULT_SDU_SIZE);
            sprintf(buf,"%ld",i);
            sdu_data(sdu,buf);
            free(buf);
            sdu_write(sd,sdu,DEFAULT_SDU_SIZE);
            
            /* open the requested file */
						if((fd = fopen(carg.filename,"r")) == NULL) 
							die_with_error("fopen() failed");            
                    
						/* send the file */
						send_file(sd,fd,i,carg.sdu_size);
						
						/* close file descriptor */ 
	         	fclose(fd);
            
            /* delete used sdu */
						sdu_delete(sdu);
					
					}

				}			


    
    }
    
  }

}
/*****************************************************************************
 *                                                                           *
 *                      10101000100010001010101100101010101                  *
 *                      0101010101               0101010100                  *
 *                      0101010101               0101010100                  *
 *                      1010101010        10101  0101110101                  *
 *                      1010101010       01  10  0101011101                  *
 *                      1010111010       01      0101010101                  *
 *                       010101010  01  010 0101 010101010                   *
 *                       010101010  01  010  01  010101011                   *
 *                        01010101  01  010  01  01010101                    *
 *                        11010101  01  010  01  01010110                    *
 *                         1010101  01  010  01  0101000                     *
 *                         1110101  01  010  01  0101001                     *
 *                          110101      010      010001                      *
 *                           10101     001       01011                       *
 *                            1101  10101        0101                        *
 *                             110               011                         *
 *                              10               01                          *
 *                               01             10                           *
 *                                 00         10                             *
 *                                  01       01                              *
 *                                    01   01                                *
 *                                      010                                  *
 *                                       1                                   *
 *                                                                           *
 *                         Universidade Técnica de Lisboa                    *
 *                                                                           *
 *                           Instituto Superior Técnico                      *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                      RIC - Redes Integradas de Comunicações               *
 *                                 ATM Application                           *
 *                                                                           *
 *                         Professor Paulo Rogério Pereira                   *
 *                                                                           *
 *                                                                           *
 *****************************************************************************
 * @filename: strs.c                                                         *
 * @description:                                                             *
 * @language: C                                                              *
 * @compiled on: cc/gcc                                                      *
 * @last_update_at: 2007-10-12                                               *
 *****************************************************************************
 * @students_that_colaborated_on_this_file:                                  *
 *  57442 - Daniel Silvestre - daniel.silvestre@tagus.ist.utl.pt             *
 *  57476 - Hugo Miguel Pinho Freire - hugo.freire@tagus.ist.utl.pt          *
 *****************************************************************************
 * @changelog for this file:                                                 *
 *	No changelog was kept for this file.                  									 *
 *****************************************************************************
 * @comments for this file:                                                  *
 *****************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <atm.h>
#include <signal.h>
#include <sys/wait.h>
#include "../include/str.h"
#include "../include/sdu.h"

/*****************************************************************************
 * @name						usage
 * @description  		prints to stderr the correct syntax usage
 * @param						name
 */
static void usage(const char *name)
{
    fprintf(stderr,"usage: %s [itf.]vpi.vci\n",name);
    exit(1);
}

/*****************************************************************************
 * @name						die_with_error
 * @description      
 * @param           message
 */
void die_with_error(const char *message)
{
    perror(message);
    exit(1);
}

/*****************************************************************************
 * @name						file_size
 * @description     gets the file size
 * @param           filename
 * @return          on success, returns the file size, otherwise returns -1
 */
long int file_size(const char *filename) {

	int i;
	struct stat buf;
  
	if((i=lstat(filename, &buf)) < 0) return i;
  
	return buf.st_size;

}

/*****************************************************************************
 * @name						send_file
 * @description     
 * @param           
 * @return          
 */
void send_file(int sd, FILE *fd, long int size, int sdu_size){
	
	int i,n;	
	char *buf;
  sdu_t *sdu;
	
	sdu = sdu_init(sdu_size);
	buf = (char *) malloc(sdu_size);
	
  for(i=0,n=sdu_size;i<size;i+=sdu_size){
  	if(i+sdu_size>size) n=i+sdu_size-size;
		memset(buf,'\0',strlen(buf)); 		
 		fread(buf,n,1,fd);
 		sdu_data(sdu,buf);
 		sdu_write(sd,sdu,sdu_size);
	}
	
	sdu_delete(sdu);
	free(buf);
	
}
	
/*****************************************************************************
 * @name						main
 * @description  		
 * @param						argc, argv
 * @return					returns 0 on a successful exit
 */
int main(int argc,char **argv)
{
    struct sockaddr_atmpvc addr;
    struct atm_qos qos;
    int sd, s;
    long int i;
		sdu_t *sdu;
		FILE *fd;
		char *buf, *cwd;
    fd_set allset, rset;
		arg_t marg, carg;       
      
    /* verify the correct number of arguments given */    
    if (argc != 2) usage(argv[0]);
    	
		memcpy(marg.name,argv[0],strlen(argv[0]));    	

    /* create a socket for atm pvc use */	    	
    if ((sd=socket(PF_ATMPVC,SOCK_DGRAM,0)) < 0){
			die_with_error("socket() failed");
    }
    
    memset(&addr,0,sizeof(addr));

    /* convert textual representation of atm address to binary */    
    if (text2atm(argv[1],(struct sockaddr *) &addr,sizeof(addr),
      T2A_PVC | T2A_UNSPEC | T2A_WILDCARD) < 0) usage(marg.name);
      
    memset(&qos,0,sizeof(qos));

	  /* fill in the desired qos params */    
		qos.aal = ATM_AAL5;
    qos.rxtp.traffic_class = ATM_UBR;
    qos.rxtp.max_sdu = DEFAULT_SDU_SIZE;
    qos.txtp.traffic_class = ATM_UBR;
    qos.txtp.max_sdu = DEFAULT_SDU_SIZE;
    
    /* set options on sockets */    
    if (setsockopt(sd,SOL_ATM,SO_ATMQOS,&qos,sizeof(qos)) < 0){
			die_with_error("setsockopt() failed");
    }
    
    /* do a bind */
    if (bind(sd,(struct sockaddr *) &addr,sizeof(addr)) < 0){
			die_with_error("bind() failed");
    }
   
		/* clear all bits in allset */
    FD_ZERO(&allset);
    
    /* turn on the bit for sd in allset */ 
    FD_SET(sd,&allset); 
   
    /* change to directory containg files */ 
    cwd = getcwd(NULL,0);
    buf = (char *) malloc(strlen(cwd)+strlen(DEFAULT_FILE_DIR));
    sprintf(buf,"%s%s",cwd,DEFAULT_FILE_DIR);
    chdir(buf);
    free(cwd);
    free(buf);
    
    /* main cycle for read and write sdu's to the client */
    while (1) {

			memcpy(&rset,&allset,sizeof(fd_set));

			if((s = select(sd+1,&rset,NULL,NULL,NULL)) > 0 ){

				if(FD_ISSET(sd,&rset)){
	        
	        /* prepare a sdu */    	            
					sdu = sdu_init(DEFAULT_SDU_SIZE);
          
          /* receive filename being requested */
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);
					memcpy(carg.filename,sdu->data,strlen(sdu->data)+1);

					/* receive the desired bitrate */
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);
					carg.bitrate = atoi(sdu->data);

					/* receive the desired sdu size */					
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);										
					carg.sdu_size = atoi(sdu->data);
									
					printf("File %s was requested with a bitrate of %i and SDU size of %i bytes\n",carg.filename,carg.bitrate,carg.sdu_size);
			    
			    /* verify if filename exists, if not warn the client */ 
    			if((i = file_size(carg.filename)) < 0){
    				sdu_data(sdu,FILE_NOT_FOUND);
    				sdu_write(sd,sdu,DEFAULT_SDU_SIZE);    				
    			} 
    			else{
    				
    				/* if file exists, send the file size */
    				buf = (char *) malloc(DEFAULT_SDU_SIZE);
            sprintf(buf,"%ld",i);
            sdu_data(sdu,buf);
            free(buf);
            sdu_write(sd,sdu,DEFAULT_SDU_SIZE);
            
            /* open the requested file */
						if((fd = fopen(carg.filename,"r")) == NULL) 
							die_with_error("fopen() failed");            
                    
						/* send the file */
						send_file(sd,fd,i,carg.sdu_size);
						
						/* close file descriptor */ 
	         	fclose(fd);
            
            /* delete used sdu */
						sdu_delete(sdu);
					
					}

				}			


    
    }
    
  }

}
/*****************************************************************************
 *                                                                           *
 *                      10101000100010001010101100101010101                  *
 *                      0101010101               0101010100                  *
 *                      0101010101               0101010100                  *
 *                      1010101010        10101  0101110101                  *
 *                      1010101010       01  10  0101011101                  *
 *                      1010111010       01      0101010101                  *
 *                       010101010  01  010 0101 010101010                   *
 *                       010101010  01  010  01  010101011                   *
 *                        01010101  01  010  01  01010101                    *
 *                        11010101  01  010  01  01010110                    *
 *                         1010101  01  010  01  0101000                     *
 *                         1110101  01  010  01  0101001                     *
 *                          110101      010      010001                      *
 *                           10101     001       01011                       *
 *                            1101  10101        0101                        *
 *                             110               011                         *
 *                              10               01                          *
 *                               01             10                           *
 *                                 00         10                             *
 *                                  01       01                              *
 *                                    01   01                                *
 *                                      010                                  *
 *                                       1                                   *
 *                                                                           *
 *                         Universidade Técnica de Lisboa                    *
 *                                                                           *
 *                           Instituto Superior Técnico                      *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                      RIC - Redes Integradas de Comunicações               *
 *                                 ATM Application                           *
 *                                                                           *
 *                         Professor Paulo Rogério Pereira                   *
 *                                                                           *
 *                                                                           *
 *****************************************************************************
 * @filename: strs.c                                                         *
 * @description:                                                             *
 * @language: C                                                              *
 * @compiled on: cc/gcc                                                      *
 * @last_update_at: 2007-10-12                                               *
 *****************************************************************************
 * @students_that_colaborated_on_this_file:                                  *
 *  57442 - Daniel Silvestre - daniel.silvestre@tagus.ist.utl.pt             *
 *  57476 - Hugo Miguel Pinho Freire - hugo.freire@tagus.ist.utl.pt          *
 *****************************************************************************
 * @changelog for this file:                                                 *
 *	No changelog was kept for this file.                  									 *
 *****************************************************************************
 * @comments for this file:                                                  *
 *****************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <atm.h>
#include <signal.h>
#include <sys/wait.h>
#include "../include/str.h"
#include "../include/sdu.h"

/*****************************************************************************
 * @name						usage
 * @description  		prints to stderr the correct syntax usage
 * @param						name
 */
static void usage(const char *name)
{
    fprintf(stderr,"usage: %s [itf.]vpi.vci\n",name);
    exit(1);
}

/*****************************************************************************
 * @name						die_with_error
 * @description      
 * @param           message
 */
void die_with_error(const char *message)
{
    perror(message);
    exit(1);
}

/*****************************************************************************
 * @name						file_size
 * @description     gets the file size
 * @param           filename
 * @return          on success, returns the file size, otherwise returns -1
 */
long int file_size(const char *filename) {

	int i;
	struct stat buf;
  
	if((i=lstat(filename, &buf)) < 0) return i;
  
	return buf.st_size;

}

/*****************************************************************************
 * @name						send_file
 * @description     
 * @param           
 * @return          
 */
void send_file(int sd, FILE *fd, long int size, int sdu_size){
	
	int i,n;	
	char *buf;
  sdu_t *sdu;
	
	sdu = sdu_init(sdu_size);
	buf = (char *) malloc(sdu_size);
	
  for(i=0,n=sdu_size;i<size;i+=sdu_size){
  	if(i+sdu_size>size) n=i+sdu_size-size;
		memset(buf,'\0',strlen(buf)); 		
 		fread(buf,n,1,fd);
 		sdu_data(sdu,buf);
 		sdu_write(sd,sdu,sdu_size);
	}
	
	sdu_delete(sdu);
	free(buf);
	
}
	
/*****************************************************************************
 * @name						main
 * @description  		
 * @param						argc, argv
 * @return					returns 0 on a successful exit
 */
int main(int argc,char **argv)
{
    struct sockaddr_atmpvc addr;
    struct atm_qos qos;
    int sd, s;
    long int i;
		sdu_t *sdu;
		FILE *fd;
		char *buf, *cwd;
    fd_set allset, rset;
		arg_t marg, carg;       
      
    /* verify the correct number of arguments given */    
    if (argc != 2) usage(argv[0]);
    	
		memcpy(marg.name,argv[0],strlen(argv[0]));    	

    /* create a socket for atm pvc use */	    	
    if ((sd=socket(PF_ATMPVC,SOCK_DGRAM,0)) < 0){
			die_with_error("socket() failed");
    }
    
    memset(&addr,0,sizeof(addr));

    /* convert textual representation of atm address to binary */    
    if (text2atm(argv[1],(struct sockaddr *) &addr,sizeof(addr),
      T2A_PVC | T2A_UNSPEC | T2A_WILDCARD) < 0) usage(marg.name);
      
    memset(&qos,0,sizeof(qos));

	  /* fill in the desired qos params */    
		qos.aal = ATM_AAL5;
    qos.rxtp.traffic_class = ATM_UBR;
    qos.rxtp.max_sdu = DEFAULT_SDU_SIZE;
    qos.txtp.traffic_class = ATM_UBR;
    qos.txtp.max_sdu = DEFAULT_SDU_SIZE;
    
    /* set options on sockets */    
    if (setsockopt(sd,SOL_ATM,SO_ATMQOS,&qos,sizeof(qos)) < 0){
			die_with_error("setsockopt() failed");
    }
    
    /* do a bind */
    if (bind(sd,(struct sockaddr *) &addr,sizeof(addr)) < 0){
			die_with_error("bind() failed");
    }
   
		/* clear all bits in allset */
    FD_ZERO(&allset);
    
    /* turn on the bit for sd in allset */ 
    FD_SET(sd,&allset); 
   
    /* change to directory containg files */ 
    cwd = getcwd(NULL,0);
    buf = (char *) malloc(strlen(cwd)+strlen(DEFAULT_FILE_DIR));
    sprintf(buf,"%s%s",cwd,DEFAULT_FILE_DIR);
    chdir(buf);
    free(cwd);
    free(buf);
    
    /* main cycle for read and write sdu's to the client */
    while (1) {

			memcpy(&rset,&allset,sizeof(fd_set));

			if((s = select(sd+1,&rset,NULL,NULL,NULL)) > 0 ){

				if(FD_ISSET(sd,&rset)){
	        
	        /* prepare a sdu */    	            
					sdu = sdu_init(DEFAULT_SDU_SIZE);
          
          /* receive filename being requested */
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);
					memcpy(carg.filename,sdu->data,strlen(sdu->data)+1);

					/* receive the desired bitrate */
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);
					carg.bitrate = atoi(sdu->data);

					/* receive the desired sdu size */					
					sdu_read(sd,sdu,DEFAULT_SDU_SIZE);										
					carg.sdu_size = atoi(sdu->data);
									
					printf("File %s was requested with a bitrate of %i and SDU size of %i bytes\n",carg.filename,carg.bitrate,carg.sdu_size);
			    
			    /* verify if filename exists, if not warn the client */ 
    			if((i = file_size(carg.filename)) < 0){
    				sdu_data(sdu,FILE_NOT_FOUND);
    				sdu_write(sd,sdu,DEFAULT_SDU_SIZE);    				
    			} 
    			else{
    				
    				/* if file exists, send the file size */
    				buf = (char *) malloc(DEFAULT_SDU_SIZE);
            sprintf(buf,"%ld",i);
            sdu_data(sdu,buf);
            free(buf);
            sdu_write(sd,sdu,DEFAULT_SDU_SIZE);
            
            /* open the requested file */
						if((fd = fopen(carg.filename,"r")) == NULL) 
							die_with_error("fopen() failed");            
                    
						/* send the file */
						send_file(sd,fd,i,carg.sdu_size);
						
						/* close file descriptor */ 
	         	fclose(fd);
            
            /* delete used sdu */
						sdu_delete(sdu);
					
					}

				}			


    
    }
    
  }

}
